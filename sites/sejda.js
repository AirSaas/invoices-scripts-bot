const path = require("path");
const { log } = require("../utils/logger");
const {
  findCandidateElements,
  getCssSelectors,
} = require("../utils/selectorAI");
const { attemptDownloads } = require("../utils/download"); // Crearemos este archivo a continuación

const SITE_NAME = "sejda";
const LOGIN_URL = "https://www.sejda.com/login";
const INVOICE_URL = "https://www.sejda.com/account/invoices";

// ¡IMPORTANTE! No dejes credenciales en texto plano en un repositorio público.
const CREDENTIALS = {
  email: process.env.OPENAI_API_KSEJDA_EMAILEY,
  password: process.env.SEJDA_PSW,
};

async function run(browser) {
  const context = await browser.newContext();
  const page = await context.newPage();
  const downloadPath = path.resolve(__dirname, "..", "factures", SITE_NAME);
  let downloadedFiles = [];

  try {
    log(`${SITE_NAME.toUpperCase()} START`);

    // 1. Iniciar sesión
    await page.goto(LOGIN_URL);
    await page.fill('input[name="email"]', CREDENTIALS.email);
    await page.fill('input[name="password"]', CREDENTIALS.password);
    await page.click('button[type="submit"]');
    await page.waitForURL(INVOICE_URL, { waitUntil: "networkidle" });
    log(`${SITE_NAME.toUpperCase()} LOGIN OK`);

    // 2. Navegar a la página de facturas (si es necesario)
    if (page.url() !== INVOICE_URL) {
      await page.goto(INVOICE_URL, { waitUntil: "networkidle" });
    }
    log(`${SITE_NAME.toUpperCase()} ON INVOICE PAGE`);

    // 3. Llamada a IA #1: Obtener elementos candidatos
    const html = await page.content();
    const candidates = await findCandidateElements(html);
    log(`${SITE_NAME.toUpperCase()} CANDIDATES_FROM_AI ${candidates.length}`);

    if (candidates.length === 0) {
      throw new Error("No download candidates found by AI.");
    }

    // 4. Llamada a IA #2: Obtener selectores CSS
    const selectors = await getCssSelectors(candidates);
    log(`${SITE_NAME.toUpperCase()} SELECTORS_FROM_AI ${selectors.length}`);
    if (selectors.length === 0) {
      throw new Error("No CSS selectors generated by AI.");
    }

    // 5. Intentar descargas
    downloadedFiles = await attemptDownloads(page, selectors, downloadPath);
    log(`${SITE_NAME.toUpperCase()} DONE ${downloadedFiles.length} file(s)`);
  } catch (error) {
    log(`ERROR in ${SITE_NAME}: ${error.message}`);
  } finally {
    await context.close();
    return downloadedFiles;
  }
}

module.exports = { run, SITE_NAME };
